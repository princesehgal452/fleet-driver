import { IObservableArray, observable } from 'mobx';
import { IAdditionalInfo } from '../../interfaces/shared/IAdditionalInfo';
import { IUploadedFiles } from '../../interfaces/shared/IUploadedFiles';
import { IPreferredPerMileRate } from '../../interfaces/shared/IPreferredPerMileRate';
import { IAddress } from '../../interfaces/shared/IAddress';
import { IPreferredLanes } from '../../interfaces/shared/IPreferredLanes';
import { IAgreedToTermsAndConditions } from '../../interfaces/shared/IAgreedToTermsAndConditions';
import { IFOUser } from '../../interfaces/shared/IFOUser';
import { ITutorial } from '../../interfaces/shared/ITutorial';
import { IOperatingLane } from '../../interfaces/shared/IOperatingLanes';
import { ICommunicationsPreferences } from '../../interfaces/shared/ICommunicationsPreferences';
import { DispatchableType } from '../DispatchableType';
import { DriverTruck } from '../DriverTruck';
import { DOCUMENT_TYPES, UserType } from '../../../services/constants';


export class FOUser implements IFOUser {
  @observable email: string;
  @observable phone: string;
  @observable emailVerified: boolean;
  @observable userType: UserType;
  @observable displayName: string;
  @observable creationTimestamp: number;
  @observable disabled: boolean;
  @observable firebaseUID: string;
  @observable additionalInfo: IAdditionalInfo;
  @observable uploadedFiles: IUploadedFiles;
  @observable equipmentTypeList: string[];
  @observable truckType: string;
  @observable preferredPerMileRate: IPreferredPerMileRate;
  @observable truckCount: number;
  @observable officePhone: string;
  @observable companyName: string;
  @observable companyType: string;
  @observable address: IAddress;
  @observable mcNumber: string;
  @observable preferredLanes: IPreferredLanes;
  @observable agreedToTermsAndConditions: IAgreedToTermsAndConditions;
  @observable channel: string;
  @observable firstLogin: boolean;
  @observable dispatchable: DispatchableType;
  @observable drivers: DriverTruck[];
  @observable fleetId: string;
  @observable truck?: DriverTruck;
  @observable inAppNotifications: number;
  @observable tutorial: ITutorial;
  @observable operatingLanes: IObservableArray<IOperatingLane>;
  @observable documents?: DOCUMENT_TYPES;
  @observable tac?: string;
  @observable tracking?: string;
  @observable communicationsPreferences: ICommunicationsPreferences;
  @observable permissions: IDriverPermissions;
  @observable pickupRadius?: string;
  @observable dropoffRadius?: string;

  constructor(user: IFOUser) {
    this.email = user.email;
    this.phone = user.phone;
    this.emailVerified = user.emailVerified;
    this.userType = user.userType;
    this.displayName = user.displayName;
    this.creationTimestamp = user.creationTimestamp;
    this.disabled = user.disabled;
    this.firebaseUID = user.firebaseUID;
    this.additionalInfo = user.additionalInfo;
    this.uploadedFiles = user.uploadedFiles;
    this.equipmentTypeList = user.equipmentTypeList || observable([]);
    this.truckType = user.truckType;
    this.preferredPerMileRate = user.preferredPerMileRate;
    this.truckCount = user.truckCount;
    this.officePhone = user.officePhone;
    this.companyName = user.companyName;
    this.companyType = user.companyType;
    this.address = user.address;
    this.mcNumber = user.mcNumber;
    this.preferredLanes = user.preferredLanes;
    this.agreedToTermsAndConditions = user.agreedToTermsAndConditions;
    this.channel = user.channel;
    this.firstLogin = user.firstLogin;
    this.dispatchable = user.dispatchable;
    this.fleetId = user.fleetId;
    this.inAppNotifications = user.inAppNotifications;
    this.tutorial = user.tutorial;
    this.operatingLanes = user.operatingLanes;
    this.documents = user.documents;
    this.tac = user.tac;
    this.tracking = user.tracking;
    this.communicationsPreferences = user.communicationsPreferences || {};
    this.permissions = user.permissions || {};
    this.drivers = user.drivers?.find((driver) => !(driver instanceof DriverTruck)) ? user.drivers.map((driver) => new DriverTruck(driver)) : observable([]);
    this.drivers = user.drivers?.map((driver) => new DriverTruck(driver)) || observable([]);
    this.truck = user.truck ? new DriverTruck(user.truck) : undefined;
    this.pickupRadius = user.pickupRadius;
    this.dropoffRadius = user.dropoffRadius;
  }
}
